import matplotlib.pyplot as plt
import matplotlib


def read_file(file):
    res = []
    with open(file, "r") as f:
        data = f.readlines()
        for line in data:
            res.append(float(line.rstrip()))
    return res


if __name__ == '__main__':
    matplotlib.rc("font", family="Noto Sans CJK JP")

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_pure_mct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_pure.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_uct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_uct.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木アルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_pure_mct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_pure.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_uct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_uct.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_random")
    y1 = read_file("../scores/ImprovedResNet_vs_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_pure_mct_search")
    y1 = read_file("../scores/ImprovedResNet_vs_pure_mct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_pure.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_uct_search")
    y1 = read_file("../scores/ImprovedResNet_vs_uct_search")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_uct.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_random")
    y1 = read_file("../scores/ResNet_vs_random_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="既存手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_random_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_pure_mct_search")
    y1 = read_file("../scores/ResNet_vs_pure_mct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="既存手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_pure_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_uct_search")
    y1 = read_file("../scores/ResNet_vs_uct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="既存手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/existing_vs_uct_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_random")
    y1 = read_file("../scores/ImprovedResNet_vs_random_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_random_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_pure_mct_search")
    y1 = read_file("../scores/ImprovedResNet_vs_pure_mct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_pure_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ImprovedResNet_vs_uct_search")
    y1 = read_file("../scores/ImprovedResNet_vs_uct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="提案手法")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）")
    plt.legend(loc="best")
    plt.savefig("../images/proposed_vs_uct_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS ランダムアルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_random_in_random")
    y1 = read_file("../scores/ImprovedResNet_vs_random_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法（拡張重力四目並べ）", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_random_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS 原始モンテカルロ木アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_pure_mct_search_in_random")
    y1 = read_file("../scores/ImprovedResNet_vs_pure_mct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法（拡張重力四目並べ）", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_pure_in_random.png")
    plt.close()

    plt.xlabel("世代")
    plt.ylabel("スコア（VS UCT モンテカルロ木探索アルゴリズム）")
    y0 = read_file("../scores/ResNet_vs_uct_search_in_random")
    y1 = read_file("../scores/ImprovedResNet_vs_uct_search_in_random")
    plt.plot([x + 1 for x in range(len(y0))], y0, label="既存手法（拡張重力四目並べ）", color="red")
    plt.plot([x + 1 for x in range(len(y1))], y1, label="提案手法（拡張重力四目並べ）", color="blue")
    plt.legend(loc="best")
    plt.savefig("../images/vs_uct_in_random.png")
    plt.close()
